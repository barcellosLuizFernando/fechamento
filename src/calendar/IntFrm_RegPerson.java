/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package calendar;

import conn.ConexaoMySQL;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.ParseException;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luiz.barcellos
 */
public class IntFrm_RegPerson extends javax.swing.JInternalFrame {

    private final ConexaoMySQL cn;
    private String sql;
    private int var_consulta;
    private Object lastId;

    private final int SEARCH_PERSON = 1;
    private final int SEARCH_DEPARTMENT = 2;
    private final int SEARCH_ORGANIZATION = 3;
    private final int SEARCH_SUBSIDIARY = 4;
    private final int SEARCH_PHONE = 5;
    private final int SEARCH_EMAIL = 6;
    private final int SEARCH_TAX_ID = 7;

    /**
     * Creates new form IntFrm_RegPerson
     */
    public IntFrm_RegPerson(final ConexaoMySQL conn) {

        initComponents();
        this.cn = conn;

        montaTabelaPhone();
        montaTabelaEmail();
        montaTabelaTributos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTxtId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTxtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTxtIdDepartment = new javax.swing.JTextField();
        jTxtDepartmentName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTxtBranchLine = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTxtIdSkype = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTxtIdOrganization = new javax.swing.JTextField();
        jTxtOrganizationName = new javax.swing.JTextField();
        jTxtSubsidiaryName = new javax.swing.JTextField();
        jTxtIdSubsidiary = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jChBActive = new javax.swing.JCheckBox();
        jTxtBirthday = new javax.swing.JFormattedTextField(tools.MascaraTextField.dataBR());
        jLabel8 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jCbCoporate = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTxtPhone = new javax.swing.JFormattedTextField(tools.MascaraTextField.phoneNumber());
        jPanel2 = new javax.swing.JPanel();
        jTxtEmail = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jCbEmailSchedule = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();

        setClosable(true);
        setTitle("Cadastro de Pessoas");

        jLabel1.setText("Código");

        jTxtId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtIdFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtIdFocusLost(evt);
            }
        });
        jTxtId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtIdKeyPressed(evt);
            }
        });

        jLabel2.setText("Nome");

        jLabel3.setText("Departamento");

        jTxtIdDepartment.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtIdDepartmentFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtIdDepartmentFocusLost(evt);
            }
        });
        jTxtIdDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtIdDepartmentKeyPressed(evt);
            }
        });

        jTxtDepartmentName.setEnabled(false);

        jLabel4.setText("Ramal");

        jLabel5.setText("skype");

        jLabel6.setText("Empresa");

        jTxtIdOrganization.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtIdOrganizationFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtIdOrganizationFocusLost(evt);
            }
        });
        jTxtIdOrganization.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtIdOrganizationKeyPressed(evt);
            }
        });

        jTxtOrganizationName.setEnabled(false);

        jTxtSubsidiaryName.setEnabled(false);

        jTxtIdSubsidiary.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtIdSubsidiaryFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtIdSubsidiaryFocusLost(evt);
            }
        });
        jTxtIdSubsidiary.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtIdSubsidiaryKeyPressed(evt);
            }
        });

        jLabel7.setText("Filial");

        jCheckBox1.setText("Enviar Cronograma");
        jCheckBox1.setToolTipText("Envia todas os cronogramas não tributários.");

        jChBActive.setSelected(true);
        jChBActive.setText("Ativo");

        jLabel8.setText("Data de Nascimento");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTxtBranchLine, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTxtIdSkype))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTxtIdOrganization)
                            .addComponent(jTxtIdDepartment)
                            .addComponent(jTxtIdSubsidiary, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTxtOrganizationName)
                            .addComponent(jTxtSubsidiaryName)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTxtDepartmentName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox1))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTxtName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTxtBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTxtId, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jChBActive)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTxtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jChBActive))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTxtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxtBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTxtIdDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxtDepartmentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTxtIdOrganization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxtOrganizationName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTxtIdSubsidiary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxtSubsidiaryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 6, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTxtBranchLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jTxtIdSkype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jButton3.setText("Gravar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Excluir");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton3)
            .addComponent(jButton4)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Telefones"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Telefone", "C"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jCbCoporate.setText("Corporativo");

        jButton1.setText("Adicionar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton5.setText("Excluir");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jTxtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCbCoporate)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCbCoporate)
                    .addComponent(jButton1)
                    .addComponent(jButton5)
                    .addComponent(jTxtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Telefones", jPanel3);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("e-Mails"));

        jButton2.setText("Adicionar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Endereço", "S"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.getTableHeader().setReorderingAllowed(false);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable2MousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jButton6.setText("Excluir");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jCbEmailSchedule.setText("Enviar Cronograma");
        jCbEmailSchedule.setToolTipText("Envia cronogramas tributários.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jTxtEmail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCbEmailSchedule)
                .addGap(18, 18, 18)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton6)
                    .addComponent(jCbEmailSchedule))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("e-Mail", jPanel2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Tributo", "Espécie", "S"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.getTableHeader().setReorderingAllowed(false);
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable3MousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setMinWidth(40);
            jTable3.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTable3.getColumnModel().getColumn(0).setMaxWidth(40);
            jTable3.getColumnModel().getColumn(2).setMinWidth(120);
            jTable3.getColumnModel().getColumn(2).setPreferredWidth(120);
            jTable3.getColumnModel().getColumn(2).setMaxWidth(120);
            jTable3.getColumnModel().getColumn(3).setMinWidth(20);
            jTable3.getColumnModel().getColumn(3).setPreferredWidth(20);
            jTable3.getColumnModel().getColumn(3).setMaxWidth(20);
        }

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
            .addComponent(jTextField1)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Obrigações Tributárias", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            cn.iniciarTransacao();

            if ("".equals(jTxtName.getText())) {
                jTxtName.grabFocus();
                throw new UnsupportedOperationException("Informe um nome para continuar.");
            } else if ("".equals(jTxtDepartmentName.getText())) {
                jTxtDepartmentName.grabFocus();
                throw new UnsupportedOperationException("Informe um departamento para continuar.");
            } else if ("".equals(jTxtOrganizationName.getText())) {
                jTxtOrganizationName.grabFocus();
                throw new UnsupportedOperationException("Informe uma empresa para continuar.");
            } else if ("".equals(jTxtSubsidiaryName.getText())) {
                jTxtSubsidiaryName.grabFocus();
                throw new UnsupportedOperationException("Informe uma filial para continuar.");
            } else if ("".equals(jTxtBranchLine.getText())) {
                jTxtBranchLine.grabFocus();
                throw new UnsupportedOperationException("Informe um ramal para continuar.");
            }

            String id = jTxtId.getText();
            String name = jTxtName.getText();
            String organization = jTxtIdOrganization.getText();
            String department = jTxtIdDepartment.getText();
            String subsidiary = jTxtIdSubsidiary.getText();
            String branchline = jTxtBranchLine.getText();
            String skype = jTxtIdSkype.getText();
            String birthday = tools.ManipulaData.dateUSstr(jTxtBirthday.getText());
            boolean active = jChBActive.isSelected();
            boolean send_schedule = jCheckBox1.isSelected();

            if ("".equals(id)) {
                sql = "INSERT INTO reg_person (name, department, branch_line, "
                        + "organization, subsidiary, id_skype,send_schedule,active";

                if (birthday != null) {
                    sql += ",birthday";
                }

                sql += ") VALUES ('"
                        + name + "','" + department + "','" + branchline + "','"
                        + organization + "','" + subsidiary + "','"
                        + skype + "'," + send_schedule + ", " + active + " ";

                if (birthday != null) {
                    sql += ", '" + birthday + "' ";
                }

                sql += ");";
            } else {
                sql = "UPDATE fechamento.reg_person SET "
                        + "name = '" + name + "', department = '" + department
                        + "', branch_line = '" + branchline + "',"
                        + "organization = '" + organization + "',"
                        + "subsidiary = '" + subsidiary + "', "
                        + "id_skype = '" + skype + "', "
                        + "send_schedule = " + send_schedule + ", "
                        + "active = " + active;

                if (birthday != null) {
                    sql += ", birthday = '" + birthday + "' ";
                }

                sql += " WHERE id = '" + id + "';";
            }

            cn.executeAtualizacao(sql);
            while (cn.rs.next()) {
                id = (cn.rs.getString(1));
            }
            cn.rs.close();

            /**
             * CÓDIGO PARA SALVAR TABELAS, QUANDO O CADASTRO É NOVO.
             */
            if ("".equals(jTxtId.getText())) {
                jTxtId.setText(id);

                for (int i = 0; i < jTable1.getRowCount(); i++) {
                    gravaDadosPhone("", jTable1.getValueAt(i, 1).toString(), (Boolean) jTable1.getValueAt(i, 2));
                }

                for (int i = 0; i < jTable2.getRowCount(); i++) {
                    gravaDadosEMail("", jTable2.getValueAt(i, 1).toString(), (Boolean) jTable2.getValueAt(i, 2));
                }

            }

            tools.DefaultMsg.saveDataSuccessfull();
            tools.ClearFields.ClearFields(this);

        } catch (Exception e) {
            tools.DefaultMsg.errorMsg(e.getMessage());
        } finally {
            cn.finalizarTransacao();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTxtIdDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtIdDepartmentKeyPressed

        updateIndex(2, jTxtIdDepartment, evt);
    }//GEN-LAST:event_jTxtIdDepartmentKeyPressed

    private void jTxtIdOrganizationKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtIdOrganizationKeyPressed

        updateIndex(3, jTxtIdOrganization, evt);
    }//GEN-LAST:event_jTxtIdOrganizationKeyPressed

    private void jTxtIdSubsidiaryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtIdSubsidiaryKeyPressed
        updateIndex(4, jTxtIdSubsidiary, evt);        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtIdSubsidiaryKeyPressed

    private void jTxtIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtIdKeyPressed
        updateIndex(1, jTxtId, evt);        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtIdKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            if ("(  )     -    ".equals(jTxtPhone.getText())) {
                throw new UnsupportedOperationException("Informe um telefone para continuar.");
            }
            /**
             * DEFINIÇÃO PARA QUANDO JÁ FOI CADASTRADA A PESSOA.
             */
            if (!"".equals(jTxtId.getText())) {
                try {
                    cn.iniciarTransacao();
                    gravaDadosPhone("", jTxtPhone.getText(), jCbCoporate.isSelected());

                } catch (SQLException e) {
                    throw new SQLException(e);
                } finally {
                    cn.finalizarTransacao();
                    var_consulta = SEARCH_PHONE;
                    incluiPesquisa();
                }

                /**
                 * DEFINIÇÃO PARA QUANDO É CADASTRO NOVO.
                 */
            } else {

                DefaultTableModel lista = (DefaultTableModel) jTable1.getModel();

                lista.addRow(new Object[]{
                    "",
                    jTxtPhone.getText(),
                    new Boolean(jCbCoporate.isSelected())
                });
            }
            jTxtPhone.setValue(null);
        } catch (Exception e) {
            tools.DefaultMsg.errorMsg(e.getMessage());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            if ("".equals(jTxtEmail.getText())) {
                throw new UnsupportedOperationException("Informe um e-mail para continuar.");
            }

            /**
             * DEFINIÇÃO PARA QUANDO JÁ FOI CADASTRADA A PESSOA.
             */
            if (!"".equals(jTxtId.getText())) {
                try {
                    cn.iniciarTransacao();
                    gravaDadosEMail("", jTxtEmail.getText(), jCbEmailSchedule.isSelected());

                } catch (SQLException e) {
                    throw new SQLException(e);
                } finally {
                    cn.finalizarTransacao();
                    var_consulta = SEARCH_EMAIL;
                    incluiPesquisa();
                }

                /**
                 * DEFINIÇÃO PARA QUANDO É CADASTRO NOVO.
                 */
            } else {

                DefaultTableModel lista = (DefaultTableModel) jTable2.getModel();

                lista.addRow(new Object[]{
                    "",
                    jTxtEmail.getText(),
                    new Boolean(jCbEmailSchedule.isSelected())
                });
            }
            jTxtEmail.setText("");
        } catch (Exception e) {
            tools.DefaultMsg.errorMsg(e.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            if (jTable1.getSelectedRowCount() > 0) {

                if (!"".equals(jTxtId.getText())) {

                    for (int i = 0; i < jTable1.getSelectedRowCount(); i++) {
                        gravaDadosPhone(jTable1.getValueAt(jTable1.getSelectedRows()[i], 0).toString(), "X", false);

                    }

                    var_consulta = SEARCH_PHONE;
                    incluiPesquisa();
                } else {
                    DefaultTableModel lista = (DefaultTableModel) jTable1.getModel();
                    for (int i = 0; i < jTable1.getSelectedRowCount(); i++) {
                        lista.removeRow(jTable1.getSelectedRows()[i]);
                    }
                }
            } else {
                throw new UnsupportedOperationException("Selecione um número de telefone para excluir.");
            }
        } catch (Exception e) {
            tools.DefaultMsg.errorMsg(e.getMessage());
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTxtIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtIdFocusLost
        updateIndex(1, jTxtId, jTxtName);
    }//GEN-LAST:event_jTxtIdFocusLost

    private void jTxtIdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtIdFocusGained
        lastId = jTxtId.getText();        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtIdFocusGained

    private void jTxtIdDepartmentFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtIdDepartmentFocusGained
        lastId = jTxtIdDepartment.getText();
    }//GEN-LAST:event_jTxtIdDepartmentFocusGained

    private void jTxtIdDepartmentFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtIdDepartmentFocusLost
        updateIndex(2, jTxtIdDepartment, jTxtDepartmentName);        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtIdDepartmentFocusLost

    private void jTxtIdOrganizationFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtIdOrganizationFocusGained
        lastId = jTxtIdOrganization.getText();        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtIdOrganizationFocusGained

    private void jTxtIdOrganizationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtIdOrganizationFocusLost
        updateIndex(3, jTxtIdOrganization, jTxtOrganizationName);        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtIdOrganizationFocusLost

    private void jTxtIdSubsidiaryFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtIdSubsidiaryFocusGained
        lastId = jTxtIdSubsidiary.getText();        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtIdSubsidiaryFocusGained

    private void jTxtIdSubsidiaryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtIdSubsidiaryFocusLost
        updateIndex(4, jTxtIdSubsidiary, jTxtSubsidiaryName);        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtIdSubsidiaryFocusLost

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            if (jTable2.getSelectedRowCount() > 0) {

                if (!"".equals(jTxtId.getText())) {

                    for (int i = 0; i < jTable2.getSelectedRowCount(); i++) {
                        gravaDadosEMail(jTable2.getValueAt(jTable2.getSelectedRows()[i], 0).toString(), "X", false);

                    }

                    var_consulta = SEARCH_EMAIL;
                    incluiPesquisa();
                } else {
                    DefaultTableModel lista = (DefaultTableModel) jTable2.getModel();
                    for (int i = 0; i < jTable2.getSelectedRowCount(); i++) {
                        lista.removeRow(jTable2.getSelectedRows()[i]);
                    }
                }
            } else {
                throw new UnsupportedOperationException("Selecione um endereço de e-Mail para excluir.");
            }
        } catch (Exception e) {
            tools.DefaultMsg.errorMsg(e.getMessage());
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (!"".equals(jTxtId.getText())) {
            int answer = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir " + jTxtName.getText() + " permanentemente?", "Excluir Pessoa", JOptionPane.YES_NO_OPTION);

            if (answer == 0) {
                try {
                    cn.iniciarTransacao();
                    sql = "DELETE FROM fechamento.reg_person_email "
                            + "WHERE id_person = '" + jTxtId.getText() + "';";
                    cn.executeAtualizacao(sql);
                    sql = "DELETE FROM fechamento.reg_person_phone "
                            + "WHERE id_person = '" + jTxtId.getText() + "';";
                    cn.executeAtualizacao(sql);
                    sql = "DELETE FROM fechamento.reg_person "
                            + "WHERE id = '" + jTxtId.getText() + "';";
                    cn.executeAtualizacao(sql);

                    tools.DefaultMsg.saveDataSuccessfull();
                    tools.ClearFields.ClearFields(this);

                } catch (Exception e) {
                    tools.DefaultMsg.errorMsg(e.getMessage());
                } finally {
                    cn.finalizarTransacao();
                }
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        if (jTable1.getEditingColumn() == 2 && !"".equals(jTxtId.getText())) {
            try {
                cn.iniciarTransacao();
                gravaDadosPhone(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString(),
                        jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString().replaceAll("[^0-9]", ""),
                        (Boolean) jTable1.getValueAt(jTable1.getSelectedRow(), 2).equals(false));
            } catch (Exception e) {
                tools.DefaultMsg.errorMsg(e.getMessage());
            } finally {
                cn.finalizarTransacao();
            }
        }
    }//GEN-LAST:event_jTable1MousePressed

    private void jTable2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MousePressed
        if (jTable2.getEditingColumn() == 2 && !"".equals(jTxtId.getText())) {
            try {
                cn.iniciarTransacao();
                gravaDadosEMail(jTable2.getValueAt(jTable2.getSelectedRow(), 0).toString(),
                        jTable2.getValueAt(jTable2.getSelectedRow(), 1).toString(),
                        (Boolean) jTable2.getValueAt(jTable2.getSelectedRow(), 2).equals(false));
            } catch (Exception e) {
                tools.DefaultMsg.errorMsg(e.getMessage());
            } finally {
                cn.finalizarTransacao();
            }
        }
    }//GEN-LAST:event_jTable2MousePressed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        new tools.FiltrarTabela(jTable3, jTextField1.getText());        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTable3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MousePressed
        if (jTable3.getEditingColumn() == 3 && !"".equals(jTxtId.getText())) {
            try {
                cn.iniciarTransacao();

                gravaDadosTaxStatements(jTable3.getValueAt(jTable3.getSelectedRow(), 0).toString(),
                        (Boolean) jTable3.getValueAt(jTable3.getSelectedRow(), 3).equals(false));
            } catch (Exception e) {
                tools.DefaultMsg.errorMsg(e.getMessage());
            } finally {
                cn.finalizarTransacao();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable3MousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCbCoporate;
    private javax.swing.JCheckBox jCbEmailSchedule;
    private javax.swing.JCheckBox jChBActive;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JFormattedTextField jTxtBirthday;
    private javax.swing.JTextField jTxtBranchLine;
    private javax.swing.JTextField jTxtDepartmentName;
    private javax.swing.JTextField jTxtEmail;
    private javax.swing.JTextField jTxtId;
    private javax.swing.JTextField jTxtIdDepartment;
    private javax.swing.JTextField jTxtIdOrganization;
    private javax.swing.JTextField jTxtIdSkype;
    private javax.swing.JTextField jTxtIdSubsidiary;
    private javax.swing.JTextField jTxtName;
    private javax.swing.JTextField jTxtOrganizationName;
    private javax.swing.JFormattedTextField jTxtPhone;
    private javax.swing.JTextField jTxtSubsidiaryName;
    // End of variables declaration//GEN-END:variables

    private void incluiPesquisa() {

        switch (var_consulta) {

            case SEARCH_PERSON:

                String id = jTxtId.getText();

                sql = "SELECT * FROM fechamento.reg_person "
                        + "WHERE id = '" + id + "';";

                tools.ClearFields.ClearFields(this);

                jTxtId.setText(id);

                try {
                    cn.iniciarTransacao();
                    cn.executeConsulta(sql);

                    while (cn.rs.next()) {
                        jTxtId.setText(cn.rs.getString("id"));
                        jTxtName.setText(cn.rs.getString("name"));
                        jTxtIdDepartment.setText(cn.rs.getString("department"));
                        jTxtIdOrganization.setText(cn.rs.getString("organization"));
                        jTxtIdSubsidiary.setText(cn.rs.getString("subsidiary"));
                        jTxtIdSkype.setText(cn.rs.getString("id_skype"));
                        jTxtBranchLine.setText(cn.rs.getString("branch_line"));
                        jCheckBox1.setSelected(cn.rs.getBoolean("send_schedule"));
                        jChBActive.setSelected(cn.rs.getBoolean("active"));
                        if (cn.rs.getString("birthday") == null) {
                            jTxtBirthday.setValue(null);
                        } else {
                            jTxtBirthday.setValue(tools.ManipulaData.dateBRstr(cn.rs.getDate("birthday")));

                        }

                    }

                    var_consulta = SEARCH_DEPARTMENT;
                    incluiPesquisa();
                    var_consulta = SEARCH_ORGANIZATION;
                    incluiPesquisa();
                    var_consulta = SEARCH_SUBSIDIARY;
                    incluiPesquisa();
                    var_consulta = SEARCH_PHONE;
                    incluiPesquisa();
                    var_consulta = SEARCH_EMAIL;
                    incluiPesquisa();

                    montaTabelaTributos();

                } catch (Exception e) {
                    tools.ClearFields.ClearFields(this);
                    tools.DefaultMsg.errorMsg(e.getMessage());
                } finally {
                    cn.finalizarTransacao();
                }

                break;

            case SEARCH_DEPARTMENT:

                sql = "SELECT name FROM fechamento.reg_departments "
                        + "WHERE id = '" + jTxtIdDepartment.getText() + "';";

                try {
                    cn.iniciarTransacao();
                    cn.executeConsulta(sql);

                    tools.AcaoPadrao.acaoPadraoResultSet(cn.rs, jTxtDepartmentName);

                } catch (Exception e) {
                    tools.DefaultMsg.errorMsg(e.getMessage());
                } finally {
                    cn.finalizarTransacao();
                }

                break;

            case SEARCH_ORGANIZATION:

                sql = "SELECT nome FROM fechamento.empresa "
                        + "WHERE id  = '" + jTxtIdOrganization.getText() + "';";

                try {
                    cn.iniciarTransacao();
                    cn.executeConsulta(sql);

                    tools.AcaoPadrao.acaoPadraoResultSet(cn.rs, jTxtOrganizationName);

                } catch (Exception e) {
                    tools.DefaultMsg.errorMsg(e.getMessage());
                } finally {
                    cn.finalizarTransacao();
                }

                break;
            case SEARCH_SUBSIDIARY:

                sql = "SELECT descricao FROM fechamento.cad_estabelecimentos "
                        + "WHERE id  = '" + jTxtIdSubsidiary.getText() + "' "
                        + "AND id_empresa = '" + jTxtIdOrganization.getText() + "';";

                try {
                    cn.iniciarTransacao();
                    cn.executeConsulta(sql);

                    tools.AcaoPadrao.acaoPadraoResultSet(cn.rs, jTxtSubsidiaryName);

                } catch (Exception e) {
                    tools.DefaultMsg.errorMsg(e.getMessage());
                } finally {
                    cn.finalizarTransacao();
                }

                break;

            case SEARCH_PHONE:
                sql = "SELECT * FROM fechamento.reg_person_phone "
                        + "WHERE id_person = '" + jTxtId.getText() + "';";
                try {
                    DefaultTableModel lista = montaTabelaPhone();

                    cn.iniciarTransacao();
                    cn.executeConsulta(sql);
                    while (cn.rs.next()) {
                        lista.addRow(new Object[]{
                            cn.rs.getString("id"),
                            tools.MascaraTextField.phoneNumber().valueToString(cn.rs.getString("number")),
                            new Boolean(cn.rs.getBoolean("corporate"))
                        });
                    }
                } catch (SQLException | ParseException e) {
                    tools.DefaultMsg.errorMsg(e + "");
                } finally {
                    cn.finalizarTransacao();
                }
                break;
            case SEARCH_EMAIL:
                sql = "SELECT * FROM fechamento.reg_person_email "
                        + "WHERE id_person = '" + jTxtId.getText() + "';";
                try {
                    DefaultTableModel lista = montaTabelaEmail();

                    cn.iniciarTransacao();
                    cn.executeConsulta(sql);
                    while (cn.rs.next()) {
                        lista.addRow(new Object[]{
                            cn.rs.getString("id"),
                            cn.rs.getString("email"),
                            new Boolean(cn.rs.getBoolean("send_schedule"))
                        });
                    }
                } catch (SQLException e) {
                    tools.DefaultMsg.errorMsg(e + "");
                } finally {
                    cn.finalizarTransacao();
                }

                break;
        }

    }

    private void updateIndex(int i, JTextField textField, KeyEvent evt) {
        int id = 0;
        String codigo = textField.getText();

        try {

            /*if ("".equals(codigo)) {
                throw new UnsupportedOperationException();
            }*/
            id = Integer.parseInt(textField.getText());

            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                id++;
            } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                id--;
                if (id < 1) {
                    textField.setText("2");
                    throw new UnsupportedOperationException();

                }
            }

            codigo = id + "";

            textField.setText(codigo);

            var_consulta = i;
            incluiPesquisa();

        } catch (UnsupportedOperationException e) {
            //NÃO REALIZA NENHUM TRATAMENTO.
            updateIndex(i, textField, evt);
        } catch (Exception e) {
            //tools.ClearFields.ClearFields(this);
            textField.setText("0");
            updateIndex(i, textField, evt);
        }

    }

    private DefaultTableModel montaTabelaPhone() {
        DefaultTableModel lista = (DefaultTableModel) jTable1.getModel();

        lista.setRowCount(0);

        jTable1.getColumnModel().getColumn(0).setMaxWidth(40);
        jTable1.getColumnModel().getColumn(0).setMinWidth(40);
        jTable1.getTableHeader().getColumnModel().getColumn(0).setMaxWidth(40);
        jTable1.getTableHeader().getColumnModel().getColumn(0).setMinWidth(40);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(20);
        jTable1.getColumnModel().getColumn(2).setMinWidth(20);
        jTable1.getTableHeader().getColumnModel().getColumn(2).setMaxWidth(20);
        jTable1.getTableHeader().getColumnModel().getColumn(2).setMinWidth(20);

        jTable1.setDefaultRenderer(Object.class, new tools.ColorRender());

        return lista;
    }

    private DefaultTableModel montaTabelaEmail() {
        DefaultTableModel lista = (DefaultTableModel) jTable2.getModel();

        lista.setRowCount(0);
        //lista.setColumnCount(0);

        //lista.addColumn("Id");
        //lista.addColumn("Endereço");
        jTable2.getColumnModel().getColumn(0).setMaxWidth(40);
        jTable2.getColumnModel().getColumn(0).setMinWidth(40);
        jTable2.getTableHeader().getColumnModel().getColumn(0).setMaxWidth(40);
        jTable2.getTableHeader().getColumnModel().getColumn(0).setMinWidth(40);
        jTable2.getColumnModel().getColumn(2).setMaxWidth(20);
        jTable2.getColumnModel().getColumn(2).setMinWidth(20);
        jTable2.getTableHeader().getColumnModel().getColumn(2).setMaxWidth(20);
        jTable2.getTableHeader().getColumnModel().getColumn(2).setMinWidth(20);
        jTable2.setDefaultRenderer(Object.class, new tools.ColorRender());

        return lista;

    }

    private DefaultTableModel montaTabelaTributos() {
        DefaultTableModel lista = (DefaultTableModel) jTable3.getModel();

        lista.setRowCount(0);

        sql = "SELECT s.id, s.alias, s.description, s.tax_code, "
                + "case s.type when 0 then 'TRIBUTO' "
                + "WHEN 1 then 'DECLARAÇÃO' "
                + "else 'OUTRAS ESPÉCIES' END AS especie,"
                + "case when exists(select * from reg_person_tribute t "
                + "     where t.id = '" + jTxtId.getText() + "' "
                + "     and t.id_tax = s.id) then true else false "
                + "end as selected "
                + "FROM tax_statements s "
                + "WHERE s.active is true;";
        try {
            cn.iniciarTransacao();
            cn.executeConsulta(sql);
            while (cn.rs.next()) {
                lista.addRow(new Object[]{
                    cn.rs.getString("id"),
                    cn.rs.getString("alias") + " - " + cn.rs.getString("description") +" "+ cn.rs.getString("tax_code"),
                    cn.rs.getString("especie"),
                    new Boolean(cn.rs.getBoolean("selected"))
                });
            }
        } catch (Exception e) {
            tools.DefaultMsg.errorMsg(e.getMessage());
        } finally {
            cn.finalizarTransacao();
        }

        return lista;
    }

    /**
     * INSERE, ATUALIZA E EXCLUI DO BANCO DE DADOS. DEVE SER CHAMADO A PARTIR DE
     * UM "TRY", APÓS DECLARAR O INÍCIO DA TRANSAÇÃO. DECLARAR O FINAL DA
     * TRANSAÇÃO AO FINAL DO PROCESSO. FEITO ASSIM PARA QUE SEJA POSSÍVEL LANÇAR
     * TODOS OS NÚMEROS DE UMA ÚNICA VEZ.
     *
     * @param id "" para Inserir; Número, para alterar
     * @param number "Número", para inserir ou alterar; 'X' para Excluir
     * @param corporate
     */
    private void gravaDadosPhone(String id, String number, Boolean corporate) throws SQLException {

        if ("".equals(id)) {
            sql = "INSERT INTO fechamento.reg_person_phone (id_person, number, corporate) "
                    + "VALUES ('" + jTxtId.getText() + "',"
                    + "'" + number.replaceAll("[^0-9]", "") + "',"
                    + corporate + ");";
        } else {

            if (!"X".equals(number)) {
                sql = "UPDATE fechamento.reg_person_phone SET "
                        + "number = '" + number.replaceAll("[^0-9]", "") + "',"
                        + "corporate = " + corporate + " "
                        + "WHERE id_person = '" + jTxtId.getText() + "' AND "
                        + "id = '" + id + "';";
            } else {
                sql = "DELETE FROM fechamento.reg_person_phone "
                        + "WHERE id = '" + id + "' AND "
                        + "id_person = '" + jTxtId.getText() + "';";
            }

        }

        try {
            cn.executeAtualizacao(sql);
        } catch (SQLException e) {
            throw new SQLException(e);
        }

    }

    private void updateIndex(int varcons, JTextField id, JTextField name) {

        System.out.println("Id: " + id.getText());
        System.out.println("IdAnterior: " + lastId);
        System.out.println("Nome: " + name.getText());
        System.out.println("Variavel: " + varcons);

        if (!id.getText().equals(lastId) && !"".equals(id.getText())) {
            var_consulta = varcons;
            incluiPesquisa();

            if ("".equals(name.getText())) {

                switch (varcons) {
                    case 1:
                        tools.ClearFields.ClearFields(this);
                        break;

                    default:
                        id.setText("");

                        break;
                }

            }

        }

    }

    private void gravaDadosEMail(String id, String email, Boolean schedule) throws Exception {
        if ("".equals(id)) {
            sql = "INSERT INTO fechamento.reg_person_email (id_person, email, send_schedule) "
                    + "VALUES ('" + jTxtId.getText() + "',"
                    + "'" + email + "'," + schedule + ");";
        } else {

            if (!"X".equals(email)) {
                sql = "UPDATE fechamento.reg_person_email SET "
                        + "email = '" + email + "',"
                        + "send_schedule = " + schedule + " "
                        + "WHERE id_person = '" + jTxtId.getText() + "' AND "
                        + "id = '" + id + "';";
            } else {
                sql = "DELETE FROM fechamento.reg_person_email "
                        + "WHERE id = '" + id + "' AND "
                        + "id_person = '" + jTxtId.getText() + "';";
            }

        }

        try {
            cn.executeAtualizacao(sql);
        } catch (SQLException e) {
            throw new SQLException(e);
        }
    }

    private void gravaDadosTaxStatements(String id, Boolean selected) {
        if (selected) {
            sql = "INSERT INTO reg_person_tribute (id,id_tax) "
                    + "VALUES ('" + jTxtId.getText() + "','" + id + "');";
        } else {
            sql = "DELETE FROM reg_person_tribute "
                    + "WHERE id = '" + jTxtId.getText() + "' AND "
                    + "id_tax = '" + id + "';";
        }

        try {
            cn.iniciarTransacao();
            cn.executeAtualizacao(sql);
        } catch (Exception e) {
            tools.DefaultMsg.errorMsg(e.getMessage());
        } finally {
            cn.finalizarTransacao();
        }
    }
}
