/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TelaCadastros;

import conn.ConexaoFB;
import conn.ConexaoMySQL;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ferna
 */
public class QuebraTecnica extends javax.swing.JInternalFrame {

    int lancamentos;
    int lancamento_atual;
    /**
     * Creates new form QuebraTecnica
     */
    private final ConexaoFB cnfb = new ConexaoFB();

    private ConexaoMySQL cn;

    private final DateFormat dateOut = new SimpleDateFormat("yyyy/MM/dd");
    private final DateFormat dateIn = new SimpleDateFormat("dd/MM/yyyy");

    private final DecimalFormat df = new DecimalFormat("#,##0.00");

    public QuebraTecnica(ConexaoMySQL conn) {
        initComponents();
        this.cn = conn;
        MontaTabela();
        MontaProdutos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSpData = new javax.swing.JSpinner();
        jBtnPesquisar = new javax.swing.JButton();
        jCbProdutos = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTxtQtd = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTxtQuebra = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTxtQuebraSacas = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jBtnGravar = new javax.swing.JButton();
        jpb = new javax.swing.JProgressBar();

        setClosable(true);
        setTitle("Quebra TÃ©cnica");
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        jLabel1.setText("Data ");

        jSpData.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, new java.util.Date(), java.util.Calendar.DAY_OF_MONTH));
        jSpData.setEditor(new javax.swing.JSpinner.DateEditor(jSpData, "dd/MM/yyyy"));

        jBtnPesquisar.setText("Pesquisar");
        jBtnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPesquisarActionPerformed(evt);
            }
        });

        jCbProdutos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCbProdutos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSpData, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBtnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jSpData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnPesquisar)
                    .addComponent(jCbProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("Quantidade");

        jTxtQtd.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtQtd.setEnabled(false);

        jLabel3.setText("Quebra");

        jTxtQuebra.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtQuebra.setEnabled(false);

        jLabel4.setText("Kg");

        jLabel5.setText("Kg");

        jLabel6.setText("Sc");

        jTxtQuebraSacas.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTxtQuebraSacas.setEnabled(false);

        jLabel7.setText("Sacas");

        jBtnGravar.setText("Gravar");
        jBtnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGravarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTxtQtd, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTxtQuebra, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTxtQuebraSacas, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(jTxtQuebraSacas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(jBtnGravar))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jTxtQuebra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jTxtQtd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 803, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPesquisarActionPerformed
        lancamento_atual = 0;

        MontaTabela();

        DefaultTableModel lista = (DefaultTableModel) jTable1.getModel();

        String produto = jCbProdutos.getSelectedItem().toString();
        String datafb = dateIn.format(jSpData.getValue()).replace("/", ".");
        String data_comp = dateIn.format(jSpData.getValue());

        String sql = "with "
                + "    estabelec as ( "
                + "        select "
                + "        es.empresa, "
                + "        es.codigo, "
                + "        lpad(es.codigo,2,0) || ' - ' || es.nome as unidade_destino, "
                + "        lpad(es.codigo,2,0)  as cod_unidade_destino, "
                + "        replace(replace(replace(es.cnpj,'-',''),'/',''),'.','') as cnpj, "
                + "        (select t.codigo from cad_terceiros t where t.empresa = es.empresa and t.cpf_cnpj = replace(replace(replace(es.cnpj,'-',''),'/',''),'.','') ) as cliente "
                + "        from "
                + "        cad_estabelecimentos es "
                + "    ), "
                + "    produtos as ( "
                + "        select "
                + "        pt.empresa, "
                + "        pt.codigo, "
                + "        pt.nome as mercadoria, "
                + "        pt.nome_reduzido as produto "
                + "        from cad_produtos pt "
                + "        where pt.marca = 5 "
                + "    ), "
                + "    estoque as ( "
                + "        select "
                + "        A.produto as cod_mercadoria, "
                + "        lpad(B.estabelec,2,0)  as unidade, "
                + "        case when lpad(A.deposito,2,0) is null then lpad(B.estabelec,2,0) else lpad(A.deposito,2,0) end as deposito, "
                + "        C.mercadoria, "
                + "        C.produto, "
                + "        sum(A.quantidade) as Prop_Entrada, "
                + "        0 as Prop_Saida, "
                + "        0 as Prop_Movimento, "
                + "        0 as Prop_Producao, "
                + "        0 as Em_Terc_Entradas, "
                + "        0 as Em_Terc_Saidas, "
                + "        0 as De_Terc_Entradas, "
                + "        0 as De_Terc_Saidas, "
                + "        0 as Pedidos, "
                + "        0 as em_transito "
                + "        from com_entradas_produtos A "
                + "        left join com_entradas B on (A.empresa=B.empresa and A.codigo=B.codigo) "
                + "        inner join produtos C on (A.empresa=C.empresa and A.produto=C.codigo) "
                + "        left join cad_estabelecimentos D on (B.empresa=D.empresa and B.estabelec=D.codigo) "
                + "        where A.empresa=1 and A.mov_est_fisico_emp='S' and B.dt_entrada <= ' " + datafb + "' and b.estabelec <> 8 "
                + "        group by 1, 2, 3, 4, 5 "
                + "        UNION ALL "
                + "        SELECT "
                + "        A1.produto as cod_mercadoria, "
                + "        lpad(B1.estabelec,2 ,0) as unidade, "
                + "        case when lpad(A1.deposito,2,0) is null then lpad(B1.estabelec,2,0) else lpad(A1.deposito,2,0) end as deposito, "
                + "        C1.mercadoria, "
                + "        C1.produto, "
                + "        0 as Prop_Entrada, "
                + "        sum(A1.quantidade*-1) as Prop_Saida, "
                + "        0 as Prop_Movimento, "
                + "        0 as Prop_Producao, "
                + "        0 as Em_Terc_Entradas, "
                + "        0 as Em_Terc_Saidas, "
                + "        0 as De_Terc_Entradas, "
                + "        0 as De_Terc_Saidas, "
                + "        0 as Pedidos, "
                + "        0 as em_transito "
                + "        from ven_saidas_produtos A1 "
                + "        left join ven_saidas B1 on (A1.empresa=B1.empresa and A1.codigo=B1.codigo) "
                + "        inner join produtos C1 on (A1.empresa=C1.empresa and A1.produto=C1.codigo) "
                + "        left join cad_estabelecimentos D1 on (B1.empresa=D1.empresa and B1.estabelec=D1.codigo) "
                + "        Where a1.empresa=1 and A1.mov_est_fisico_emp='S' and B1.dt_emissao <=  ' " + datafb + "' and b1.estabelec <> 8 "
                + "        group by 1, 2, 3, 4, 5 "
                + "        UNION ALL "
                + "        select "
                + "        A2.produto as cod_mercadoria, "
                + "        lpad(B2.estabelec,2 ,0) as unidade,  "
                + "        case when lpad(A2.deposito,2,0) is null then lpad(B2.estabelec,2,0) else lpad(A2.deposito,2,0) end as deposito, "
                + "        C2.mercadoria, "
                + "        C2.produto, "
                + "        0 as Prop_Entrada, "
                + "        0 as Prop_Saida, "
                + "        sum(case when B2.TIPO='E' then A2.quantidade else (A2.quantidade)*-1 end)as Prop_Movimento, "
                + "        0 as Prop_Producao, "
                + "        0 as Em_Terc_Entradas, "
                + "        0 as Em_Terc_Saidas, "
                + "        0 as De_Terc_Entradas, "
                + "        0 as De_Terc_Saidas, "
                + "        0 as Pedidos, "
                + "        0 as em_transito "
                + "        from est_movimentos_detalhe A2 "
                + "        left join est_movimentos B2 on (A2.empresa=B2.empresa and A2.numero=B2.numero) "
                + "        inner join produtos C2 on (A2.empresa=C2.empresa and A2.produto=C2.codigo) "
                + "        left join cad_estabelecimentos D2 on (B2.empresa=D2.empresa AND B2.estabelec=D2.codigo) "
                + "        where  A2.empresa=1 and B2.data <= ' " + datafb + "' and b2.estabelec <> 8 "
                + "        group by 1, 2, 3, 4, 5 "
                + "        UNION ALL "
                + "        select "
                + "        A3.produto as cod_mercadoria, "
                + "        lpad(B3.estabelec,2 ,0) as unidade, "
                + "        case when lpad(A3.deposito,2,0) is null then lpad(B3.estabelec,2,0) else lpad(A3.deposito,2,0) end as deposito, "
                + "        C3.mercadoria, "
                + "        C3.produto, "
                + "        0 as Prop_entrada, "
                + "        0 as Prop_Saida, "
                + "        0 as Prop_Movimento, "
                + "        SUM (A3.quantidade * (-1)) as Prop_Producao, "
                + "        0 as Em_Terc_Entradas, "
                + "        0 as Em_Terc_Saidas, "
                + "        0 as De_Terc_Entradas, "
                + "        0 as De_Terc_Saidas, "
                + "        0 as Pedidos, "
                + "        0 as em_transito "
                + "        from "
                + "        prod_ordem_prod_produtos A3 "
                + "        left join prod_ordem_producao B3 on (A3.empresa=B3.empresa and A3.codigo=B3.codigo) "
                + "        inner join produtos C3 on (A3.empresa=C3.empresa and A3.produto=C3.codigo) "
                + "        left join cad_estabelecimentos E3 on (B3.empresa=E3.empresa and B3.estabelec=E3.codigo) "
                + "        where A3.empresa=1 and A3.movimenta_estoque = 'S' and B3.data <= ' " + datafb + "' and B3.estabelec <> 8 "
                + "        group by 1, 2, 3, 4, 5 "
                + "        UNION ALL "
                + "        select "
                + "        C4.codigo as cod_mercadoria, "
                + "        lpad(B4.estabelec,2 ,0) as unidade, "
                + "        case when lpad(A4.deposito,2,0) is null then lpad(B4.estabelec,2,0) else lpad(A4.deposito,2,0) end as deposito, "
                + "        C4.mercadoria, "
                + "        C4.produto, "
                + "        0 as Prop_entrada, "
                + "        0 as Prop_Saida, "
                + "        0 as Prop_Movimento, "
                + "        SUM(A4.quantidade) as Prop_Producao, "
                + "        0 as Em_Terc_Entradas, "
                + "        0 as Em_Terc_Saidas, "
                + "        0 as De_Terc_Entradas, "
                + "        0 as De_Terc_Saidas, "
                + "        0 as Pedidos, "
                + "        0 as em_transito "
                + "        from "
                + "        prod_op_produtos_produzidos A4 "
                + "        left join prod_ordem_producao B4 on (A4.empresa=B4.empresa and A4.codigo=B4.codigo) "
                + "        inner join produtos C4 on (A4.empresa=C4.empresa and A4.produto=C4.codigo) "
                + "        left join cad_estabelecimentos D4 on (B4.empresa=D4.empresa and B4.estabelec=D4.codigo) "
                + "        where A4.empresa=1 and A4.movimenta_estoque = 'S' and A4.data <= ' " + datafb + "' and B4.estabelec <> 8 "
                + "        group by 1, 2, 3, 4, 5 "
                + "      UNION ALL "
                + "        SELECT "
                + "        C5.codigo as cod_mercadoria, "
                + "        lpad(B5.estabelec,2 ,0) as unidade,       "
                + "        case when lpad(A5.deposito,2,0) is null then lpad(B5.estabelec,2,0) else lpad(A5.deposito,2,0) end as deposito, "
                + "        C5.mercadoria, "
                + "        C5.produto, "
                + "        0 as Prop_entrada, "
                + "        0 as Prop_Saida, "
                + "        0 as Prop_Movimento, "
                + "        0 as Prop_Producao, "
                + "        0 as Em_Terc_Entradas, "
                + "        0 as Em_Terc_Saidas, "
                + "        SUM(A5.quantidade) as De_Terc_Entradas, "
                + "        0 as De_Terc_Saidas, "
                + "        0 as Pedidos, "
                + "        0 as em_transito "
                + "        from com_entradas_produtos A5 "
                + "        left join com_entradas B5 on (A5.empresa=B5.empresa and A5.codigo=B5.codigo) "
                + "        inner join produtos C5 on (A5.empresa=C5.empresa and A5.produto=C5.codigo) "
                + "        left join cad_estabelecimentos D5 on (B5.empresa=D5.empresa and B5.estabelec=D5.codigo) "
                + "        Where A5.empresa=1 and A5.deposito_de_terceiros='S' and B5.dt_entrada <= ' " + datafb + "' and b5.estabelec <> 8 "
                + "        group by 1, 2, 3, 4, 5 "
                + "        UNION ALL "
                + "        SELECT "
                + "        C6.codigo as cod_mercadoria, "
                + "        lpad(B6.estabelec,2 ,0) as unidade,     "
                + "        case when lpad(A6.deposito,2,0) is null then lpad(B6.estabelec,2,0) else lpad(A6.deposito,2,0) end as deposito, "
                + "        C6.mercadoria, "
                + "        C6.produto, "
                + "        0 as Prop_entrada, "
                + "        0 as Prop_Saida, "
                + "        0 as Prop_Movimento, "
                + "        0 as Prop_Producao, "
                + "        0 as Em_Terc_Entradas, "
                + "        0 as Em_Terc_Saidas, "
                + "        0 as De_Terc_Entradas, "
                + "        SUM(A6.quantidade*-1) as De_Terc_Saidas, "
                + "        0 as Pedidos, "
                + "        0 as em_transito "
                + "        from ven_saidas_produtos A6 "
                + "        inner join ven_saidas B6 on (A6.empresa=B6.empresa and A6.codigo=B6.codigo) "
                + "        inner join produtos C6 on (A6.empresa=C6.empresa and A6.produto=C6.codigo) "
                + "        left join cad_estabelecimentos D6 on (B6.empresa=D6.empresa and B6.estabelec=D6.codigo) "
                + "        Where A6.empresa=1 and A6.dev_deposito_de_terceiros='S' and B6.dt_emissao <= ' " + datafb + "' and b6.estabelec <> 8 "
                + "        group by 1, 2, 3, 4, 5 "
                + "        "
                + "        UNION ALL "
                + "        SELECT "
                + "        C7.codigo as cod_mercadoria, "
                + "        lpad(B7.estabelec,2 ,0) as unidade, "
                + "        case when lpad(A7.deposito,2,0) is null then lpad(B7.estabelec,2,0) else lpad(A7.deposito,2,0) end as deposito, "
                + "        C7.mercadoria, "
                + "        C7.produto, "
                + "        0 as Prop_entrada, "
                + "        0 as Prop_Saida, "
                + "        0 as Prop_Movimento, "
                + "        0 as Prop_Producao, "
                + "        SUM(A7.quantidade) as Em_Terc_Entradas, "
                + "        0 as Em_Terc_Saidas, "
                + "        0 as De_Terc_Entradas, "
                + "        0 as De_Terc_Saidas, "
                + "        0 as Pedidos, "
                + "        0 as em_transito "
                + "        from com_entradas_produtos A7 "
                + "        inner join com_entradas B7 on (A7.empresa=B7.empresa and A7.codigo=B7.codigo) "
                + "        inner join produtos C7 on (A7.empresa=C7.empresa and A7.produto=C7.codigo) "
                + "        left join cad_estabelecimentos D7 on (B7.empresa=D7.empresa and B7.estabelec=D7.codigo) "
                + "        Where A7.empresa=1 and A7.dev_deposito_em_terceiros='S' and B7.dt_entrada <= ' " + datafb + "' and b7.estabelec <> 8 "
                + "        group by 1, 2, 3, 4, 5 "
                + "        UNION ALL "
                + "        SELECT "
                + "        C8.codigo as cod_mercadoria, "
                + "        lpad(B8.estabelec,2 ,0) as unidade,  "
                + "        case when lpad(A8.deposito,2,0) is null then lpad(B8.estabelec,2,0) else lpad(A8.deposito,2,0) end as deposito, "
                + "        C8.mercadoria, "
                + "        C8.produto, "
                + "        0 as Prop_entrada, "
                + "        0 as Prop_Saida, "
                + "        0 as Prop_Movimento, "
                + "        0 as Prop_Producao, "
                + "        0 as Em_Terc_Entradas, "
                + "        SUM(A8.quantidade*-1) as Em_Terc_Saidas, "
                + "        0 as De_Terc_Entradas, "
                + "        0 as De_Terc_Saidas, "
                + "        0 as Pedidos, "
                + "        0 as em_transito "
                + "        from ven_saidas_produtos A8 "
                + "        inner join ven_saidas B8 on (A8.empresa=B8.empresa and A8.codigo=B8.codigo) "
                + "        inner join produtos C8 on (A8.empresa=C8.empresa and A8.produto=C8.codigo) "
                + "        left join cad_estabelecimentos D8 on (B8.empresa=D8.empresa and B8.estabelec=D8.codigo) "
                + "        where A8.empresa=1 and A8.deposito_em_terceiros='S' and B8.dt_emissao <= ' " + datafb + "' and b8.estabelec <> 8 "
                + "        group by 1, 2, 3, 4, 5 "
                + "      union all "
                + "        select "
                + "        C9.codigo as cod_mercadoria, "
                + "        lpad(B9.estabelec,2 ,0) as unidade, "
                + "        case when lpad(A9.deposito,2,0) is null then lpad(B9.estabelec,2,0) else lpad(A9.deposito,2,0) end as deposito, "
                + "        C9.mercadoria, "
                + "        C9.produto, "
                + "        0 as Prop_entrada, "
                + "        0 as Prop_Saida, "
                + "        0 as Prop_Movimento, "
                + "        0 as Prop_Producao, "
                + "        0 as Em_Terc_Entradas, "
                + "        0 as Em_Terc_Saidas, "
                + "        0 as De_Terc_Entradas, "
                + "        0 as De_Terc_Saidas, "
                + "        sum(A9.saldo*-1) as Pedidos, "
                + "        0 as em_transito "
                + "        from ven_pedido_venda_produto A9 "
                + "        inner join ven_pedido_venda B9 on (A9.empresa=B9.empresa and A9.codigo=b9.codigo) "
                + "        inner join produtos C9 on (A9.empresa=C9.empresa and A9.produto=C9.codigo) "
                + "        left join cad_estabelecimentos D9 on (B9.empresa=D9.empresa and B9.estabelec=D9.codigo) "
                + "        left join cad_operacoes_fisc E9 on (A9.empresa=E9.empresa and A9.operacao=E9.codigo) "
                + "        where A9.saldo>0.01 and E9.venda_compra_produtos='S' and B9.estabelec <> 8 "
                + "        group by 1, 2, 3, 4, 5 "
                + "        UNION ALL "
                + "        SELECT "
                + "        C10.codigo as cod_mercadoria, "
                + "        lpad(B10.estabelec,2,0) as unidade, "
                + "        case when lpad(A10.deposito,2,0) is null then lpad(B10.estabelec,2,0) else lpad(A10.deposito,2,0) end as deposito, "
                + "        C10.mercadoria, "
                + "        C10.produto, "
                + "        0 as Prop_Entrada, "
                + "        0 as Prop_Saida, "
                + "        0 as Prop_Movimento, "
                + "        sum(A10.quantidade) as Prop_Producao, "
                + "        0 as Em_Terc_Entradas, "
                + "        0 as Em_Terc_Saidas, "
                + "        0 as De_Terc_Entradas, "
                + "        0 as De_Terc_Saidas, "
                + "        0 as Pedidos, "
                + "        0 as em_transito "
                + "        from prod_ordem_prod_subp A10 "
                + "        left join prod_op_produtos_produzidos E10 on (A10.empresa=E10.empresa and A10.producao_origem=E10.codigo and A10.producao_origem_seq=E10.sequencia) "
                + "        left join prod_ordem_producao B10 on (A10.empresa=B10.empresa and A10.codigo=B10.codigo) "
                + "        inner join produtos C10 on (A10.empresa=C10.empresa and A10.produto=C10.codigo) "
                + "        left join cad_estabelecimentos D10 on (B10.empresa=D10.empresa and B10.estabelec=D10.codigo) "
                + "        where A10.empresa=1 and A10.data <= ' " + datafb + "' and B10.estabelec <> 8 "
                + "        group by 1, 2, 3, 4, 5 "
                + "        UNION ALL "
                + "        select        "
                + "        C11.codigo as cod_mercadoria, "
                + "        lpad(B11.estabelec,2,0) as unidade, "
                + "        lpad(B11.deposito_destino,2,0) as deposito, "
                + "        C11.mercadoria, "
                + "        C11.produto, "
                + "        0 as Prop_Entrada, "
                + "        0 as Prop_Saida, "
                + "        0 as Prop_Movimento, "
                + "        sum(A11.quantidade) as quantidade, "
                + "        0 as Em_Terc_Entradas, "
                + "        0 as Em_Terc_Saidas, "
                + "        0 as De_Terc_Entradas, "
                + "        0 as De_Terc_Saidas, "
                + "        0 as Pedidos, "
                + "        0 as em_transito "
                + "        from est_transf_est_deposito_det A11 "
                + "        left join est_transf_est_deposito B11 on (A11.empresa=B11.empresa and A11.numero=B11.numero) "
                + "        inner join produtos C11 on (A11.empresa=C11.empresa and A11.produto=C11.codigo) "
                + "        left join cad_estabelecimentos D11 on (B11.empresa=D11.empresa and B11.estabelec=D11.codigo) "
                + "        left join cad_depositos E11 on (B11.empresa=E11.empresa and B11.deposito_destino=E11.codigo)  "
                + "        where "
                + "        (B11.data <= ' " + datafb + "') and (B11.estabelec <> 8) "
                + "        group by 1, 2, 3, 4, 5 "
                + "        UNION ALL "
                + "        select        "
                + "        C12.codigo as cod_mercadoria, "
                + "        lpad(B12.estabelec,2,0) as unidade, "
                + "        lpad(B12.deposito_origem,2,0) as deposito, "
                + "        C12.mercadoria, "
                + "        C12.produto, "
                + "        0 as Prop_Entrada, "
                + "        0 as Prop_Saida, "
                + "        0 as Prop_Movimento, "
                + "        sum(A12.quantidade)*-1 as quantidade, "
                + "        0 as Em_Terc_Entradas, "
                + "        0 as Em_Terc_Saidas, "
                + "        0 as De_Terc_Entradas, "
                + "        0 as De_Terc_Saidas, "
                + "        0 as Pedidos, "
                + "        0 as em_transito "
                + "        from est_transf_est_deposito_det A12 "
                + "        left join est_transf_est_deposito B12 on (A12.empresa=B12.empresa and A12.numero=B12.numero) "
                + "        inner join produtos C12 on (A12.empresa=C12.empresa and A12.produto=C12.codigo) "
                + "        left join cad_estabelecimentos D12 on (B12.empresa=D12.empresa and B12.estabelec=D12.codigo) "
                + "        left join cad_depositos F12 on (B12.empresa=F12.empresa and B12.deposito_origem=F12.codigo)   "
                + "        where "
                + "        (B12.data <= ' " + datafb + "') and (B12.estabelec <> 8) "
                + "          "
                + "        group by 1, 2, 3, 4, 5 "
                + "             "
                + "        UNION ALL "
                + "        select "
                + "        C13.codigo as cod_mercadoria, "
                + "        D13.cod_unidade_destino as unidade, "
                + "        D13.cod_unidade_destino as deposito, "
                + "        C13.mercadoria, "
                + "        C13.produto, "
                + "        0 as Prop_Entrada, "
                + "        0 as Prop_Saida, "
                + "        0 as Prop_Movimento,    "
                + "        0 as Prop_Producao, "
                + "        0 as Em_Terc_Entradas, "
                + "        0 as Em_Terc_Saidas, "
                + "        0 as De_Terc_Entradas, "
                + "        0 as De_Terc_Saidas, "
                + "        0 as Pedidos, "
                + "        sum(A13.quantidade) as em_transito "
                + "        from "
                + "        ven_saidas_produtos A13 "
                + "        left join ven_saidas B13 on (A13.empresa=B13.empresa and A13.codigo=B13.codigo) "
                + "        inner join produtos C13 on (A13.empresa=C13.empresa and A13.produto=C13.codigo) "
                + "        inner join estabelec D13 on (B13.empresa=D13.empresa and B13.cliente=D13.cliente) "
                + "        where "
                + "        (A13.empresa = 1) and (B13.tipo_operacao = 4) and (B13.dt_emissao <= ' " + datafb + "') and (B13.transferido is null) and "
                + "        (A13.codigo not in (select R13.codigo_venda from rel_ven_com_transferencia R13 where R13.empresa=A13.empresa)) "
                + "        group by 1, 2, 3, 4, 5 "
                + "     ) "
                + "     select "
                + "        es.cod_mercadoria, "
                + "        es.unidade, "
                + "        es.deposito, "
                + "        es.mercadoria, "
                + "        es.produto, "
                + "        ROUND(SUM(es.Prop_Entrada + es.Prop_Saida + es.Prop_Movimento + es.Prop_Producao + es.em_transito),4) as Proprio, "
                + "        ROUND(SUM(es.Prop_Entrada + es.Prop_Saida + es.Prop_Movimento + es.Prop_Producao + es.De_Terc_Entradas + es.De_Terc_Saidas + es.em_transito),4) as Fisico, "
                + "        ROUND(SUM(es.Em_Terc_Entradas + es.Em_Terc_Saidas),4) as Em_Terceiros, "
                + "        ROUND(SUM(es.De_Terc_Entradas + es.De_Terc_Saidas),4) as De_Terceiros, "
                + "        ROUND(SUM(es.Pedidos),4) as Pedidos, "
                + "        ROUND(SUM(es.Prop_Entrada + es.Prop_Saida + es.Prop_Movimento + es.Prop_Producao + es.De_Terc_Entradas + es.De_Terc_Saidas + es.Pedidos + es.em_transito),4) as SALDO, "
                + "        case when ROUND(SUM(es.Prop_Entrada + es.Prop_Saida + es.Prop_Movimento + es.Prop_Producao + es.em_transito),4) <> 0 then 'Com Valores' "
                + "             when ROUND(SUM(es.Em_Terc_Entradas + es.Em_Terc_Saidas),4) <> 0 then 'Com Valores' "
                + "             when ROUND(SUM(es.De_Terc_Entradas + es.De_Terc_Saidas),4) <> 0 then 'Com Valores' "
                + "             when ROUND(SUM(es.Pedidos),4) <> 0 then 'Com Valores' "
                + "             else 'Sem Valores' end as Filtro, "
                + "        case when ROUND(SUM(es.Prop_Entrada + es.Prop_Saida + es.Prop_Movimento + es.Prop_Producao + "
                + "                            es.De_Terc_Entradas + es.De_Terc_Saidas + "
                + "                            es.Pedidos + es.em_transito),4) = 0 then 'Sem Saldo' "
                + "             else 'Com Saldo' end as Filtro2 "
                + "     from estoque es "
                + "where produto = '" + produto + "' "
                + "     group by 1, 2, 3, 4, 5;";

        cnfb.conecta();
        try {
            cnfb.executeConsulta(sql);
            while (cnfb.rs.next()) {
                Float fisico = cnfb.rs.getFloat("fisico");
                int quebra = Math.round(fisico * 0.0015f);

                lista.addRow(new String[]{
                    cnfb.rs.getString("cod_mercadoria"),
                    cnfb.rs.getString("unidade"),
                    cnfb.rs.getString("deposito"),
                    cnfb.rs.getString("mercadoria"),
                    df.format(cnfb.rs.getDouble("Fisico")),
                    //df.format(quebra) + ""
                    quebra + ""
                });

                Double vlr_inicial_kg = Double.parseDouble(jTxtQtd.getText().replace(".", "").replace(",", "."));
                Double vlr_inicial_quebra = Double.parseDouble(jTxtQuebra.getText().replace(".", "").replace(",", "."));

                Double vlr_final_kg = vlr_inicial_kg + fisico;
                Double vlr_final_quebra = vlr_inicial_quebra + quebra;
                Double vlr_final_sacas = vlr_final_quebra / 60;

                jTxtQtd.setText(df.format(vlr_final_kg));
                jTxtQuebra.setText(df.format(vlr_final_quebra));
                jTxtQuebraSacas.setText(df.format(vlr_final_sacas));

            }
        } catch (SQLException ex) {
            Logger.getLogger(QuebraTecnica.class.getName()).log(Level.SEVERE, null, ex);
        }
        cnfb.desconecta();

    }//GEN-LAST:event_jBtnPesquisarActionPerformed

    private void jBtnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGravarActionPerformed
        lancamentos = jTable1.getRowCount();

        importaDados();

    }//GEN-LAST:event_jBtnGravarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnGravar;
    private javax.swing.JButton jBtnPesquisar;
    private javax.swing.JComboBox<String> jCbProdutos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpData;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTxtQtd;
    private javax.swing.JTextField jTxtQuebra;
    private javax.swing.JTextField jTxtQuebraSacas;
    private javax.swing.JProgressBar jpb;
    // End of variables declaration//GEN-END:variables

    private void MontaTabela() {
        DefaultTableModel lista = (DefaultTableModel) jTable1.getModel();

        lista.setColumnCount(0);
        lista.setRowCount(0);

        lista.addColumn("cod");
        lista.addColumn("Unidade");
        lista.addColumn("DepÃ³sito");
        lista.addColumn("Mercadoria");
        lista.addColumn("FÃ­sico");
        lista.addColumn("Quebra");

        jTxtQtd.setText("0.00");
        jTxtQuebra.setText("0.00");
        jTxtQuebraSacas.setText("0.00");

        jpb.setValue(0);

    }

    private void MontaProdutos() {

        jCbProdutos.removeAllItems();

        String sql = "select distinct "
                + " pt.empresa,"
                + " pt.nome_reduzido as produto"
                + " from cad_produtos pt"
                + " where pt.empresa = 1 and pt.marca = 5 "
                + "order by pt.nome_reduzido;";

        cnfb.conecta();
        try {
            cnfb.executeConsulta(sql);
            while (cnfb.rs.next()) {
                jCbProdutos.addItem(cnfb.rs.getString("produto"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(QuebraTecnica.class.getName()).log(Level.SEVERE, null, ex);
        }
        cnfb.desconecta();

        jCbProdutos.setSelectedItem("Soja Comercial");
    }

    private void importaDados() {
        new Thread() {
            public void run() {
                String mes = "";
                String ano = "";
                String unidade;
                String deposito;
                String empresa = "1";
                String cod;
                String mercadoria;
                String fisico;
                String quebra;
                String produto = jCbProdutos.getSelectedItem().toString();
                String datacompleta = dateOut.format(jSpData.getValue());
                String id_import = null;
                String id_usuario = null;
                String descricao = "QUEBRA TECNICA";

//SEPARA DATA
                try {
                    Date data = (Date) jSpData.getValue();

                    Calendar data2 = Calendar.getInstance();
                    data2.setTime(data);

                    mes = "" + (data2.get(Calendar.MONTH) + 1);
                    ano = "" + data2.get(Calendar.YEAR);

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

                String sql1 = "DELETE FROM quebra_tecnica WHERE mes = '" + mes + "' "
                        + "and ano = '" + ano + "' and produto = '" + produto + "';";

                jTable1.selectAll();

                try {
                    cn.iniciarTransacao();
                    cn.executeAtualizacao(sql1);
                    cn.executeConsulta("show table status like 'importacoes';");
                    while (cn.rs.next()) {
                        id_import = cn.rs.getString("Auto_increment");
                    }
                    cn.executeAtualizacao("INSERT INTO importacoes (id,descricao,"
                            + "data,usuario) VALUES ('" + id_import + "',"
                            + "'" + descricao + "', current_date()," + id_usuario + ");");

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                    cn.finalizarTransacao();
                }

                for (int x = jTable1.getRowCount() - 1; x != -1; x--) {

                    int linha = jTable1.getSelectedRow();

                    cod = String.valueOf(jTable1.getValueAt(linha, 0));
                    unidade = String.valueOf(jTable1.getValueAt(linha, 1));
                    deposito = String.valueOf(jTable1.getValueAt(linha, 2));
                    mercadoria = String.valueOf(jTable1.getValueAt(linha, 3));
                    fisico = String.valueOf(jTable1.getValueAt(linha, 4)).replace(".", "").replace(",", ".");
                    quebra = String.valueOf(jTable1.getValueAt(linha, 5)).replace(".", "").replace(",", ".");

                    String sql = "INSERT INTO quebra_tecnica (mes,ano,unidade,deposito,"
                            + "empresa,cod_merc,mercadoria,fisico,quebra,produto,data,id_importacao) VALUES ('" + mes + "',"
                            + "'" + ano + "','" + unidade + "','" + deposito + "','" + empresa + "',"
                            + "'" + cod + "','" + mercadoria + "','" + fisico + "','" + quebra + "',"
                            + "'" + produto + "','" + datacompleta + "','" + id_import + "');";
                    try {
                        cn.executeAtualizacao(sql);
                    } catch (SQLException e) {
                    }

                    jTable1.removeRowSelectionInterval(linha, linha);

                    lancamento_atual++;

                    preencheBarra();
                }
                cn.finalizarTransacao();

                JOptionPane.showMessageDialog(null, "Dados gravados com sucesso");

                MontaTabela();
            }

        }.start();
    }

    private void preencheBarra() {
        new Thread() {
            public void run() {
//recebe dados
                jpb.setMinimum(0);

                jpb.setMaximum(lancamentos);

                jpb.setValue(lancamento_atual);
            }

        }.start();
    }

}
